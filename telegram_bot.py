import telebot
import sqlite3
from datetime import datetime, timedelta
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import logging
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8062458756:AAEp4dollJEMbebdb6dVRR1jpemyx1GoMF8"
DB_PATH = "database/techrevive.db"
SERVICE_CENTERS = [
    "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 15",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä., –¥. 22",
    "–ö–∞–∑–∞–Ω—å, —É–ª. –ë–∞—É–º–∞–Ω–∞, –¥. 51",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 25",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —É–ª. –ì–æ—Ä—Å–∫–∞—è, –¥. 10",
]
AVAILABLE_HOURS = ["09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00"]
WELCOME_IMAGE_URL = "https://i.yapx.cc/ZW22C.png"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def is_image_url_valid(url):
    try:
        response = requests.head(url, timeout=5)
        return response.status_code == 200 and 'image' in response.headers.get('Content-Type', '')
    except requests.RequestException:
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
def get_available_dates():
    dates = []
    today = datetime.now()
    for i in range(7):
        date = (today + timedelta(days=i)).strftime("%Y-%m-%d")
        dates.append(date)
    return dates

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
def get_available_times(date):
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT time FROM appointments WHERE date = ? AND status IN ('confirmed', 'accepted')", (date,))
    booked_times = [row['time'] for row in cursor.fetchall()]
    conn.close()
    return [time for time in AVAILABLE_HOURS if time not in booked_times]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_data[user_id] = {}
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    welcome_text = (
        "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TechRevive!* üöÄ\n"
        "–ú—ã –≤–µ—Ä–Ω–µ–º –≤–∞—à—É —Ç–µ—Ö–Ω–∏–∫—É –∫ –∂–∏–∑–Ω–∏! üì±\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ *–±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëá"
    )
    try:
        if is_image_url_valid(WELCOME_IMAGE_URL):
            bot.send_photo(
                message.chat.id,
                WELCOME_IMAGE_URL,
                caption=welcome_text,
                parse_mode="Markdown",
                reply_markup=markup
            )
        else:
            bot.send_message(
                message.chat.id,
                welcome_text,
                parse_mode="Markdown",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.send_message(
            message.chat.id,
            welcome_text,
            parse_mode="Markdown",
            reply_markup=markup
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    user_id = message.from_user.id
    phone = message.contact.phone_number
    user_data[user_id]['phone'] = phone
    user_data[user_id]['name'] = message.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_data[user_id]['user_id'] = user_id
    markup = InlineKeyboardMarkup()
    for index, center in enumerate(SERVICE_CENTERS):
        markup.add(InlineKeyboardButton(f"üè† {center}", callback_data=f"center_{index}"))
    bot.send_message(
        message.chat.id,
        "*–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä:* üåç\n\n–ì–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É?",
        parse_mode="Markdown",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('center_'))
def handle_center(call):
    user_id = call.from_user.id
    center_index = int(call.data.replace('center_', ''))
    center = SERVICE_CENTERS[center_index]
    user_data[user_id]['service_center'] = center
    markup = InlineKeyboardMarkup()
    for date in get_available_dates():
        markup.add(InlineKeyboardButton(f"üìÖ {date}", callback_data=f"date_{date}"))
    bot.edit_message_text(
        "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:* üóìÔ∏è\n\n–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–∏–µ—Ö–∞—Ç—å?",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode="Markdown",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('date_'))
def handle_date(call):
    user_id = call.from_user.id
    date = call.data.replace('date_', '')
    user_data[user_id]['date'] = date
    available_times = get_available_times(date)
    if not available_times:
        bot.edit_message_text(
            "üòî –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n*–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:* üóìÔ∏è",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="Markdown"
        )
        return
    markup = InlineKeyboardMarkup()
    for time in available_times:
        markup.add(InlineKeyboardButton(f"‚è∞ {time}", callback_data=f"time_{time}"))
    bot.edit_message_text(
        "*–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:* ‚è∞\n\n–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode="Markdown",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('time_'))
def handle_time(call):
    user_id = call.from_user.id
    time = call.data.replace('time_', '')
    user_data[user_id]['time'] = time
    data = user_data[user_id]
    confirmation_text = (
        "*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:* ‚úÖ\n\n"
        f"üë§ *–ò–º—è*: {data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: {data['phone']}\n"
        f"üè† *–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä*: {data['service_center']}\n"
        f"üóìÔ∏è *–î–∞—Ç–∞*: {data['date']}\n"
        f"‚è∞ *–í—Ä–µ–º—è*: {data['time']}"
    )
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"))
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    bot.edit_message_text(
        confirmation_text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode="Markdown",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data in ['confirm', 'cancel'])
def handle_confirmation(call):
    user_id = call.from_user.id
    if call.data == 'confirm':
        data = user_data[user_id]
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO appointments (user_id, name, phone, service_center, date, time) VALUES (?, ?, ?, ?, ?, ?)
        ''', (data['user_id'], data['name'], data['phone'], data['service_center'], data['date'], data['time']))
        conn.commit()
        appointment_id = cursor.lastrowid
        conn.close()
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_{appointment_id}"))
        bot.edit_message_text(
            "üéâ *–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* (ID: {})\n\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ *—Å–∫–∏–¥–∫—É 15%* –Ω–∞ —Ä–µ–º–æ–Ω—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –°–ø–∞—Å–∏–±–æ! üòä".format(appointment_id),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    else:
        bot.edit_message_text(
            "‚ùå *–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.*\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="Markdown"
        )
    del user_data[user_id]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_'))
def handle_cancel(call):
    appointment_id = int(call.data.replace('cancel_', ''))
    user_id = call.from_user.id
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM appointments WHERE id = ? AND user_id = ?", (appointment_id, user_id))
    if cursor.rowcount > 0:
        conn.commit()
        bot.edit_message_text(
            "‚ùå *–ó–∞–ø–∏—Å—å (ID: {}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.*\n\n"
            "–î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.".format(appointment_id),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="Markdown"
        )
    else:
        bot.edit_message_text(
            "üòî –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="Markdown"
        )
    conn.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.infinity_polling()